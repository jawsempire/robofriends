{"version":3,"sources":["components/CardList.js","components/Searchbox.js","components/ErrorBoundry.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchField","searchChange","className","type","placeholder","onChange","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflowY","height","App","onSearchUpdate","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAgCeA,G,MAzBE,SAAC,GAAa,EAAZC,OAQX,MAAM,IAAIC,MAAM,mBCDTC,EAZG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,qBAAKC,UAAU,KAAf,SACI,uBAAOC,KAAK,SACXC,YAAY,cACbC,SAAYJ,OCiBTK,E,kDApBX,WAAYC,GAAQ,IAAD,8BACf,gBACKC,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG7B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,+DAGJG,KAAKL,MAAMO,a,GAlBCC,aCSZC,EATA,SAACT,GACZ,OACI,qBAAKU,MAAO,CAACC,UAAW,SAAWC,OAAO,SAA1C,SACKZ,EAAMO,YC0EJM,G,wDAtDX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKT,SAAS,CAACb,YAAasB,EAAMC,OAAOC,SAbzC,EAAKhB,MAAQ,CACTX,OAAQ,GACRG,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKhB,SAAS,CAAChB,OAAOgC,S,oBAOxC,WAEI,MAA+BjB,KAAKJ,MAA5BX,EAAR,EAAQA,OAAQG,EAAhB,EAAgBA,YACV8B,EAAiBjC,EAAOkC,QAAQ,SAAAC,GAClC,OAAOA,EAAMC,KAAKC,cAAcC,SAASnC,EAAYkC,kBAE1D,OAAQrC,EAAOuC,OAGV,gCACI,oBAAIlC,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWD,aAAgBW,KAAKS,iBAChC,cAAC,EAAD,UACI,cAAC,EAAD,UAEI,cAAC,EAAD,CAAUxB,OAAUiC,WAR/B,gD,GAhCKf,cCNHsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCGdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fbe156d8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nimport \"../styles/CardList.css\"\r\n\r\n//  ( { this is destructuring })\r\nconst CardList = ({robots}) => {\r\n   \r\n    /*robots.map((robot, i) => {\r\n                // alternative:\r\n                {/*  return <Card id = {robots[i].id} name= {robots[i].name} email= {robots[i].email} />\r\n     */\r\n                \r\n    if (true) {\r\n        throw new Error(\"the humanity!\");\r\n    }    \r\n    return (\r\n        <div className=\"cardList\">\r\n            {\r\n                robots.map((robot, i) => {  \r\n                return <Card key= {robot.id}\r\n                         id={robot.id}\r\n                         name={robot.name}\r\n                         email={robot.email} />\r\n                 })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default CardList","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n    return (\r\n        <div className=\"tc\">\r\n            <input type=\"search\"\r\n             placeholder=\"search, yo!\"      \r\n            onChange = {searchChange}\r\n            />\r\n                      \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>\"critical! meltdown imminent\"</h1>\r\n        }\r\n        //render what's inside the error boundry component\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll',  height:'600px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Scroll;\r\n\r\n","import React, {Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/Searchbox'\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Scroll from '../components/Scroll'\r\n\r\nimport \"../styles/App.css\"\r\n\r\n/*\r\n\r\nbecause this comes from a file that is \r\nnot exporting by default... need to destructure:  { }\r\n robots.js is \"export const robots\"; there could be another object to export\r\n\r\n */\r\n\r\n//  import {robots} from './robots'\r\n\r\nclass App extends Component {\r\n\r\n    // \"smart\" components have state. Usually will use class syntax\r\n    // classes will usually be used for \"smart\" components \r\n\r\n    //error boundaries (lesson 94)\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users=> this.setState({robots:users}))   \r\n    }\r\n\r\n    onSearchUpdate = (event ) =>  {\r\n        this.setState({searchField: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        // destructuring:\r\n        const { robots, searchField} = this.state;\r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n       return !robots.length ? \r\n             <h1>loading...</h1> : \r\n          (\r\n            <div  >\r\n                <h1 className=\"tc\">Robo G'Funk!</h1>\r\n                <SearchBox searchChange = {this.onSearchUpdate}></SearchBox> \r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        {/* CardList is a child to ErrorBoundry */}\r\n                        <CardList robots = {filteredRobots} />\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\n    \r\n\r\n\r\n/*   {/* <Card className=\"allCards\" id = {robots[0].id} name= {robots[0].name} email= {robots[0].email} />\r\n\r\n<Card id = {robots[1].id} name= {robots[1].name} email= {robots[1].email} />\r\n\r\n<Card id = {robots[2].id} name= {robots[2].name} email= {robots[2].email} /> }\r\n\r\n*/\r\n\r\n\r\nexport default App\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\n\nimport 'tachyons'; \n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}